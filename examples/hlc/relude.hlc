# false = \x -> \y -> y
# true  = \x -> \y -> x
# and   = \p -> \q -> p q p
# or    = \p -> \q -> p p q
# not   = \p -> p false true
# nand  = \p -> \q -> not (and p q)
# nor   = \p -> \q -> not (or p q)
# if    = \p -> \a -> \b -> p a b

# cond = \x -> \y -> \f -> f x y
# car = \p -> p true
# cdr = \p -> p false
# nil = \x -> true
# null = \p -> p (\x -> \y -> false)
# repeat = \n -> \x -> n (cond x) nil

# succ = \n -> \f -> \x -> f (n f x)
# plus = \m -> \n -> m succ n
# mult = \m -> \n -> m (plus n) 0
# pow = \b -> \e -> e b

# iszero = \n -> n (\x -> false) true
# phi    = \x -> cond (cdr x) (succ (cdr x))
# Φ      = \x -> cond (cdr x) (succ (cdr x))
# pred   = \n -> car (n Φ (cond 0 0))
# sub    = \m -> \n -> n pred m

# leq    = \m -> \n -> iszero (sub m n)
# geq    = \m -> \n -> leq n m
# eq     = \m -> \n -> and (leq n m) (geq n m)
# neq    = \m -> \n -> nand (leq n m) (geq n m)
# lt     = \m -> \n -> and (leq n m) (not (geq n m))
# gt     = \m -> \n -> and (not (leq n m)) (geq n m)

# fix  = \g -> (\x -> g (x x)) (\x -> g (x x))
# Y    = \g -> (\x -> g (x x)) (\x -> g (x x))
# B    = \x -> \y -> \z -> x (y z)
# C    = \x -> \y -> \z -> x z y
# W    = \x -> \y -> x y y
# ω    = \x -> x x
# Δ    = \x -> x x
# Ω    = ω ω
