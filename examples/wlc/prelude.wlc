; Constants
# ID := λx.x
# TRUE := λx.λy.x
# FALSE := λx.λy.y

; Logic
# AND := λp.λq.p q p
# OR := λp.λq.p p q
# NOT := λp.p FALSE TRUE
# IFTHENELSE := λp.λa.λb.p a b

; Pair
# PAIR := λx.λy.λf.f x y
# FIRST := λp.p TRUE
# SECOND := λp.p FALSE

; List
# NIL := λx.TRUE
# NULL := λp.p (λx.λy.FALSE)
# REPEAT := λn.λx.n (PAIR x) NIL

; Arithmetic - succ
# SUCC := λn.λf.λx.f (n f x)
; PLUS := λm.λn.λf.λx.m f (n f x)
# PLUS := λm.λn.m SUCC n
; MULT := λm.λn.λf.m (n f)
# MULT := λm.λn.m (PLUS n) 0
# POW := λb.λe.e b

; Natural numbers
; 0 := λf.λx.x
; 1 := λf.λx.f x
; 2 := λf.λx.f (f x)
; 3 := λf.λx.f (f (f x))

; 0 := λfx.x
; 1 := λfx.f x
; 2 := λfx.f (f x)
; 3 := λfx.f (f (f x))

; Arithmetic - pred
# ISZERO := λn.n (λx.FALSE) TRUE
# Φ := λx.PAIR (SECOND x) (SUCC (SECOND x))
# PHI := Φ
; PRED := λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)
; PRED := λn.n (λg.λk.ISZERO (g 1) k (PLUS (g k) 1)) (λv.0) 0
# PRED := λn.FIRST (n Φ (PAIR 0 0))
# SUB := λm.λn.n PRED m

; Compare
# LEQ := λm.λn.ISZERO (SUB m n)

; Other
